#!/bin/sh
#/************************************************************************
# * Copyright (c) 2013 doujinshuai (doujinshuai@gmail.com)
# * Create Time   : 04-08-2013
# * Last Modified : 04-08-2013
# *
# * Desc: push local file to remote server by ssh or rsync protocol
# *
# ************************************************************************/

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin
export PATH

#/*
# * Function to help
#*/
function usage ()
{
    echo "Usage: $0 [OPTIONS]"
    echo "  -u : dist rsync user name"
    echo "  -s : src file list"
    echo "  -d : dist rsync module name"
    echo "  -l : dist host list"
    echo "  -p : dist rsync or ssh port"
    echo "  -f : dist rsync password file"
    echo "  -t : sync type, [rsync|ssh]."
    echo "  -h : help"
    echo ""
}

#/*
# * Function to check file or directory or string
# * @arg1 is shell test condition
# * @arg2 is check object
#*/ 
function func_check_file()
{
    type=$1
    filepath=$2
    if [ ! -$type "$filepath" ]; then
        echo "Error: $filepath dont existed; Please check this file or directory."
        exit 99
    fi
}

#/*
# * Function to Rsync File to Distribute Server.
# * @arg1 is local file name
#*/ 
function do_rsync()
{
    [ -z "$1" ] && return 1 || RsyncFiles="$1"

    RSYNC_OPTIONS=" -Rtpl --timeout=120"
    if [ "rsync" == "$SYNC_TYPE" ]; then 
        [[ "$RSYNC_PORT" =~ ^[1-9][0-9]*$ ]] && RSYNC_OPTIONS=$RSYNC_OPTIONS" --port=$RSYNC_PORT"
        [ -n "$RSYNC_USER" ] && RSYNC_AUTH=$RSYNC_USER"@"
        [ -f "$RSYNC_PWD_FILE" ] && RSYNC_OPTIONS=$RSYNC_OPTIONS" --password-file=$RSYNC_PWD_FILE"
        $RSYNC $RSYNC_OPTIONS $RsyncFiles ${RSYNC_AUTH}${RSYNC_HOST}::${RSYNC_MODULE}/ || exit 1
    else
        func_check_file n $RSYNC_USER
        if [[ "$RSYNC_PORT" =~ ^[1-9][0-9]*$ ]]; then
            $RSYNC $RSYNC_OPTIONS -e "ssh -p $RSYNC_PORT" $RsyncFiles ${RSYNC_USER}@${RSYNC_HOST}:${RSYNC_MODULE} || exit 1
        else
            $RSYNC $RSYNC_OPTIONS -e ssh $RsyncFiles ${RSYNC_USER}@${RSYNC_HOST}:${RSYNC_MODULE} || exit 1
        fi
    fi
}




#/*
# * Initialize environment variables
#*/
MaxFilesNum=20
RSYNC_USER=
RSYNC_PORT=
SRC_FILE=
RSYNC_MODULE=
HOST_LIST=
SYNC_TYPE=
RSYNC_PWD_FILE=

#/*
# * get cmd line arguments
#*/
while getopts ":u:p:s:d:l:t:f:h" OPT
do
    case $OPT in
        u)  RSYNC_USER=$OPTARG ;;
        p)  RSYNC_PORT=$OPTARG ;;
        s)  SRC_FILE=$OPTARG ;;
        d)  RSYNC_MODULE=$OPTARG ;;
        l)  HOST_LIST=$OPTARG ;;
        t)  SYNC_TYPE=$OPTARG ;;
        f)  RSYNC_PWD_FILE=$OPTARG ;;
        h)  usage
            exit ;;
        \?) usage
            exit ;;
    esac
done

if [ $OPTIND -le 1 ]; then
    usage
    exit
fi


#/*
# * get shell command path
#*/
WorkDir=$(dirname $0)
RSYNC=$(which rsync)
FIND=$(which find)
SED=$(which sed)
CUT=$(which cut)
MD5SUM=$(which md5sum)

func_check_file f $HOST_LIST
func_check_file f $RSYNC
func_check_file f $FIND
func_check_file f $SED
func_check_file f $CUT
func_check_file n $RSYNC_MODULE
func_check_file n $SRC_FILE


#/*
# * Begin Main Function
#*/
while read RSYNC_HOST
do
    echo "> Process $SRC_FILE" 
    FILE=$SRC_FILE
    FIRST2=$(echo $FILE | $CUT -c1-2)
    if [ $FIRST2 = "./" ]; then
        FILE=$(echo $FILE | $CUT -c3-)
    fi                                                                                                                             
    if [ -f "$FILE" -o -L "$FILE" ]; then
        FILES="$FILES $FILE";
    elif [ -d "$FILE" ]; then
        FILES="$FILES $($FIND $FILE | $SED -e 's!^\./!!')"
    else
        echo "> error: file not exist or not supported file type. '$FILE'"
        exit 1
    fi
    echo "> OK."
    echo

    Count=0
    for File in $FILES; do
        [ -d $File ] && continue
        echo "> $File"
 
        RsyncFiles="$RsyncFiles $File"
        MD5=$($MD5SUM $File | $CUT -c 1-32)
        PostData="$PostData\n$File\t$MD5"
 
        Count=$((Count+1))
        if [ $Count -eq $MaxFilesNum ]; then
            do_rsync "$RsyncFiles" || exit 1
            echo -n "> Send [$Count] Files. "
            echo -e "$PostData"
            PostData=
            Count=0
            RsyncFiles=
            echo
        fi
    done
    do_rsync "$RsyncFiles" || exit 1
    echo -n "> Send [$Count] Files. "

    echo -e "$PostData"
    echo "> OK."

done < $HOST_LIST

exit 0
